{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { ScreenContext, ScreenStack, ScreenStackHeaderBackButtonImage, ScreenStackHeaderCenterView, ScreenStackHeaderConfig, ScreenStackHeaderLeftView, ScreenStackHeaderRightView, ScreenStackHeaderSearchBarView, SearchBar } from 'react-native-screens';\nimport { createNavigator, SceneView, StackActions, StackRouter } from 'react-navigation';\nimport { HeaderBackButton } from 'react-navigation-stack';\nvar REMOVE_ACTION = 'NativeStackNavigator/REMOVE';\nvar isAndroid = Platform.OS === 'android';\nvar didWarn = isAndroid;\nfunction renderComponentOrThunk(componentOrThunk, props) {\n  if (typeof componentOrThunk === 'function') {\n    return componentOrThunk(props);\n  }\n  return componentOrThunk;\n}\nfunction removeScene(route, dismissCount, navigation) {\n  navigation.dispatch({\n    type: REMOVE_ACTION,\n    immediate: true,\n    key: route.key,\n    dismissCount: dismissCount\n  });\n}\nfunction _onAppear(route, descriptor, navigation) {\n  var _descriptor$options, _descriptor$options$o;\n  (_descriptor$options = descriptor.options) === null || _descriptor$options === void 0 ? void 0 : (_descriptor$options$o = _descriptor$options.onAppear) === null || _descriptor$options$o === void 0 ? void 0 : _descriptor$options$o.call(_descriptor$options);\n  navigation.dispatch(StackActions.completeTransition({\n    toChildKey: route.key,\n    key: navigation.state.key\n  }));\n}\nfunction _onFinishTransitioning(navigation) {\n  var routes = navigation.state.routes;\n  var lastRoute = (routes === null || routes === void 0 ? void 0 : routes.length) && routes[routes.length - 1];\n  if (lastRoute) {\n    navigation.dispatch(StackActions.completeTransition({\n      toChildKey: lastRoute.key,\n      key: navigation.state.key\n    }));\n  }\n}\nfunction renderHeaderConfig(index, route, descriptor, navigationConfig) {\n  var options = descriptor.options;\n  var headerMode = navigationConfig.headerMode;\n  var backButtonInCustomView = options.backButtonInCustomView,\n    direction = options.direction,\n    disableBackButtonMenu = options.disableBackButtonMenu,\n    headerBackTitle = options.headerBackTitle,\n    headerBackTitleStyle = options.headerBackTitleStyle,\n    headerBackTitleVisible = options.headerBackTitleVisible,\n    headerHideBackButton = options.headerHideBackButton,\n    headerHideShadow = options.headerHideShadow,\n    headerLargeStyle = options.headerLargeStyle,\n    headerLargeTitle = options.headerLargeTitle,\n    headerLargeTitleHideShadow = options.headerLargeTitleHideShadow,\n    headerLargeTitleStyle = options.headerLargeTitleStyle,\n    headerShown = options.headerShown,\n    headerStyle = options.headerStyle,\n    headerTintColor = options.headerTintColor,\n    headerTitleStyle = options.headerTitleStyle,\n    _options$headerTopIns = options.headerTopInsetEnabled,\n    headerTopInsetEnabled = _options$headerTopIns === void 0 ? true : _options$headerTopIns,\n    headerTranslucent = options.headerTranslucent,\n    hideShadow = options.hideShadow,\n    largeTitle = options.largeTitle,\n    largeTitleHideShadow = options.largeTitleHideShadow,\n    title = options.title,\n    translucent = options.translucent;\n  var scene = {\n    index: index,\n    key: route.key,\n    route: route,\n    descriptor: descriptor\n  };\n  var headerOptions = {\n    backButtonInCustomView: backButtonInCustomView,\n    backTitle: headerBackTitleVisible === false ? '' : headerBackTitle,\n    backTitleFontFamily: headerBackTitleStyle === null || headerBackTitleStyle === void 0 ? void 0 : headerBackTitleStyle.fontFamily,\n    backTitleFontSize: headerBackTitleStyle === null || headerBackTitleStyle === void 0 ? void 0 : headerBackTitleStyle.fontSize,\n    color: headerTintColor,\n    direction: direction,\n    disableBackButtonMenu: disableBackButtonMenu,\n    topInsetEnabled: headerTopInsetEnabled,\n    hideBackButton: headerHideBackButton,\n    hideShadow: headerHideShadow || hideShadow,\n    largeTitle: headerLargeTitle || largeTitle,\n    largeTitleBackgroundColor: (headerLargeStyle === null || headerLargeStyle === void 0 ? void 0 : headerLargeStyle.backgroundColor) || (\n    headerLargeTitleStyle === null || headerLargeTitleStyle === void 0 ? void 0 : headerLargeTitleStyle.backgroundColor),\n    largeTitleColor: headerLargeTitleStyle === null || headerLargeTitleStyle === void 0 ? void 0 : headerLargeTitleStyle.color,\n    largeTitleFontFamily: headerLargeTitleStyle === null || headerLargeTitleStyle === void 0 ? void 0 : headerLargeTitleStyle.fontFamily,\n    largeTitleFontSize: headerLargeTitleStyle === null || headerLargeTitleStyle === void 0 ? void 0 : headerLargeTitleStyle.fontSize,\n    largeTitleFontWeight: headerLargeTitleStyle === null || headerLargeTitleStyle === void 0 ? void 0 : headerLargeTitleStyle.fontWeight,\n    largeTitleHideShadow: largeTitleHideShadow || headerLargeTitleHideShadow,\n    title: title,\n    titleColor: (headerTitleStyle === null || headerTitleStyle === void 0 ? void 0 : headerTitleStyle.color) || headerTintColor,\n    titleFontFamily: headerTitleStyle === null || headerTitleStyle === void 0 ? void 0 : headerTitleStyle.fontFamily,\n    titleFontSize: headerTitleStyle === null || headerTitleStyle === void 0 ? void 0 : headerTitleStyle.fontSize,\n    titleFontWeight: headerTitleStyle === null || headerTitleStyle === void 0 ? void 0 : headerTitleStyle.fontWeight,\n    translucent: headerTranslucent || translucent || false\n  };\n  var hasHeader = headerShown !== false && headerMode !== 'none' && options.header !== null;\n  if (!hasHeader) {\n    return React.createElement(ScreenStackHeaderConfig, _extends({}, headerOptions, {\n      hidden: true\n    }));\n  }\n  if (headerStyle !== undefined) {\n    headerOptions.backgroundColor = headerStyle.backgroundColor;\n    headerOptions.blurEffect = headerStyle.blurEffect;\n  }\n  var children = [];\n  if (options.backButtonImage) {\n    children.push(React.createElement(ScreenStackHeaderBackButtonImage, {\n      key: \"backImage\",\n      source: options.backButtonImage\n    }));\n  }\n  if (Platform.OS === 'ios' && options.searchBar) {\n    children.push(React.createElement(ScreenStackHeaderSearchBarView, null, React.createElement(SearchBar, options.searchBar)));\n  }\n  if (options.headerLeft !== undefined) {\n    children.push(React.createElement(ScreenStackHeaderLeftView, {\n      key: \"left\"\n    }, renderComponentOrThunk(options.headerLeft, {\n      scene: scene\n    })));\n  } else if (options.headerBackImage !== undefined) {\n    var goBack = function goBack() {\n      requestAnimationFrame(function () {\n        descriptor.navigation.goBack(descriptor.key);\n      });\n    };\n    children.push(React.createElement(ScreenStackHeaderLeftView, {\n      key: \"left\"\n    }, React.createElement(HeaderBackButton, {\n      onPress: goBack,\n      pressColorAndroid: options.headerPressColorAndroid,\n      tintColor: options.headerTintColor,\n      backImage: options.headerBackImage,\n      label: options.backButtonTitle,\n      truncatedLabel: options.truncatedBackButtonTitle,\n      labelVisible: options.backTitleVisible,\n      labelStyle: options.headerBackTitleStyle,\n      titleLayout: options.layoutPreset,\n\n      title: options.backButtonTitle,\n      truncatedTitle: options.truncatedBackButtonTitle,\n      backTitleVisible: options.backTitleVisible,\n      titleStyle: options.headerBackTitleStyle,\n      layoutPreset: options.layoutPreset,\n      scene: scene\n    })));\n  }\n  if (options.headerTitle) {\n    if (title === undefined && typeof options.headerTitle === 'string') {\n      headerOptions.title = options.headerTitle;\n    } else {\n      children.push(React.createElement(ScreenStackHeaderCenterView, {\n        key: \"center\"\n      }, renderComponentOrThunk(options.headerTitle, {\n        scene: scene\n      })));\n    }\n  }\n  if (options.headerRight) {\n    children.push(React.createElement(ScreenStackHeaderRightView, {\n      key: \"right\"\n    }, renderComponentOrThunk(options.headerRight, {\n      scene: scene\n    })));\n  }\n  if (children.length > 0) {\n    headerOptions.children = children;\n  }\n  return React.createElement(ScreenStackHeaderConfig, headerOptions);\n}\nvar MaybeNestedStack = function MaybeNestedStack(_ref) {\n  var isHeaderInModal = _ref.isHeaderInModal,\n    screenProps = _ref.screenProps,\n    route = _ref.route,\n    navigation = _ref.navigation,\n    SceneComponent = _ref.SceneComponent,\n    index = _ref.index,\n    descriptor = _ref.descriptor,\n    navigationConfig = _ref.navigationConfig;\n  var Screen = React.useContext(ScreenContext);\n  if (isHeaderInModal) {\n    return React.createElement(ScreenStack, {\n      style: styles.scenes\n    }, React.createElement(Screen, {\n      style: StyleSheet.absoluteFill,\n      enabled: true,\n      isNativeStack: true\n    }, renderHeaderConfig(index, route, descriptor, navigationConfig), React.createElement(SceneView, {\n      screenProps: screenProps,\n      navigation: navigation,\n      component: SceneComponent\n    })));\n  }\n  return React.createElement(SceneView, {\n    screenProps: screenProps,\n    navigation: navigation,\n    component: SceneComponent\n  });\n};\nfunction StackView(_ref2) {\n  var navigation = _ref2.navigation,\n    descriptors = _ref2.descriptors,\n    navigationConfig = _ref2.navigationConfig,\n    screenProps = _ref2.screenProps;\n  var routes = navigation.state.routes;\n  var Screen = React.useContext(ScreenContext);\n  return React.createElement(ScreenStack, {\n    style: styles.scenes,\n    onFinishTransitioning: function onFinishTransitioning() {\n      return _onFinishTransitioning(navigation);\n    }\n  }, routes.map(function (route, index) {\n    var descriptor = descriptors[route.key];\n    var getComponent = descriptor.getComponent,\n      options = descriptor.options;\n    var routeNavigationProp = descriptor.navigation;\n    var mode = navigationConfig.mode,\n      transparentCard = navigationConfig.transparentCard;\n    var SceneComponent = getComponent();\n    var stackPresentation = 'push';\n    if (options.stackPresentation) {\n      stackPresentation = options.stackPresentation;\n    } else {\n      if (mode === 'modal' || mode === 'containedModal') {\n        stackPresentation = mode;\n        if (transparentCard || options.cardTransparent) {\n          stackPresentation = mode === 'containedModal' ? 'containedTransparentModal' : 'transparentModal';\n        }\n      }\n    }\n    var stackAnimation = options.stackAnimation;\n    if (options.animationEnabled === false) {\n      stackAnimation = 'none';\n    }\n    var hasHeader = options.headerShown !== false && (navigationConfig === null || navigationConfig === void 0 ? void 0 : navigationConfig.headerMode) !== 'none' && options.header !== null;\n    if (!didWarn && stackPresentation !== 'push' && options.headerShown !== undefined) {\n      didWarn = true;\n      console.warn('Be aware that changing the visibility of header in modal on iOS will result in resetting the state of the screen.');\n    }\n    var isHeaderInModal = isAndroid ? false : stackPresentation !== 'push' && hasHeader && options.headerShown === true;\n    var isHeaderInPush = isAndroid ? hasHeader : stackPresentation === 'push' && hasHeader;\n    return React.createElement(Screen, {\n      key: \"screen_\" + route.key,\n      enabled: true,\n      isNativeStack: true,\n      style: [StyleSheet.absoluteFill, options.cardStyle],\n      stackAnimation: stackAnimation,\n      customAnimationOnSwipe: options.customAnimationOnSwipe,\n      stackPresentation: stackPresentation,\n      replaceAnimation: options.replaceAnimation === undefined ? 'pop' : options.replaceAnimation,\n      pointerEvents: index === navigation.state.routes.length - 1 ? 'auto' : 'none',\n      gestureEnabled: Platform.OS === 'android' ? false : options.gestureEnabled === undefined ? true : options.gestureEnabled,\n      nativeBackButtonDismissalEnabled: options.nativeBackButtonDismissalEnabled,\n      fullScreenSwipeEnabled: options.fullScreenSwipeEnabled,\n      screenOrientation: options.screenOrientation,\n      statusBarAnimation: options.statusBarAnimation,\n      statusBarColor: options.statusBarColor,\n      statusBarHidden: options.statusBarHidden,\n      statusBarStyle: options.statusBarStyle,\n      statusBarTranslucent: options.statusBarTranslucent,\n      onAppear: function onAppear() {\n        return _onAppear(route, descriptor, routeNavigationProp);\n      },\n      onWillAppear: function onWillAppear() {\n        var _options$onWillAppear;\n        return options === null || options === void 0 ? void 0 : (_options$onWillAppear = options.onWillAppear) === null || _options$onWillAppear === void 0 ? void 0 : _options$onWillAppear.call(options);\n      },\n      onWillDisappear: function onWillDisappear() {\n        var _options$onWillDisapp;\n        return options === null || options === void 0 ? void 0 : (_options$onWillDisapp = options.onWillDisappear) === null || _options$onWillDisapp === void 0 ? void 0 : _options$onWillDisapp.call(options);\n      },\n      onDisappear: function onDisappear() {\n        var _options$onDisappear;\n        return options === null || options === void 0 ? void 0 : (_options$onDisappear = options.onDisappear) === null || _options$onDisappear === void 0 ? void 0 : _options$onDisappear.call(options);\n      },\n      onHeaderBackButtonClicked: function onHeaderBackButtonClicked() {\n        return removeScene(route, 1, routeNavigationProp);\n      },\n      onDismissed: function onDismissed(e) {\n        return removeScene(route, e.nativeEvent.dismissCount, routeNavigationProp);\n      }\n    }, isHeaderInPush && renderHeaderConfig(index, route, descriptor, navigationConfig), React.createElement(MaybeNestedStack, {\n      isHeaderInModal: isHeaderInModal,\n      screenProps: screenProps,\n      route: route,\n      navigation: routeNavigationProp,\n      SceneComponent: SceneComponent,\n      index: index,\n      descriptor: descriptor,\n      navigationConfig: navigationConfig\n    }));\n  }));\n}\nvar styles = StyleSheet.create({\n  scenes: {\n    flex: 1\n  }\n});\nfunction createStackNavigator(routeConfigMap) {\n  var stackConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var router = StackRouter(routeConfigMap, stackConfig);\n\n  var superGetStateForAction = router.getStateForAction;\n  router.getStateForAction = function (action, state) {\n    if (action.type === REMOVE_ACTION) {\n      var key = action.key,\n        immediate = action.immediate,\n        dismissCount = action.dismissCount;\n      var backRouteIndex = state.index;\n      if (key) {\n        var backRoute = state.routes.find(function (route) {\n          return route.key === key;\n        });\n        backRouteIndex = state.routes.indexOf(backRoute);\n      }\n      if (backRouteIndex > 0) {\n        var newRoutes = _toConsumableArray(state.routes);\n        if (dismissCount > 1) {\n          newRoutes.splice(backRouteIndex - dismissCount + 1, dismissCount);\n        } else {\n          newRoutes.splice(backRouteIndex, 1);\n        }\n        return _objectSpread(_objectSpread({}, state), {}, {\n          routes: newRoutes,\n          index: newRoutes.length - 1,\n          isTransitioning: immediate !== true\n        });\n      }\n    }\n    return superGetStateForAction(action, state);\n  };\n\n  return createNavigator(StackView, router, stackConfig);\n}\nexport default createStackNavigator;","map":{"version":3,"mappings":"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","names":["React","ScreenContext","ScreenStack","ScreenStackHeaderBackButtonImage","ScreenStackHeaderCenterView","ScreenStackHeaderConfig","ScreenStackHeaderLeftView","ScreenStackHeaderRightView","ScreenStackHeaderSearchBarView","SearchBar","createNavigator","SceneView","StackActions","StackRouter","HeaderBackButton","REMOVE_ACTION","isAndroid","Platform","OS","didWarn","renderComponentOrThunk","componentOrThunk","props","removeScene","route","dismissCount","navigation","dispatch","type","immediate","key","onAppear","descriptor","options","completeTransition","toChildKey","state","onFinishTransitioning","routes","lastRoute","length","renderHeaderConfig","index","navigationConfig","headerMode","backButtonInCustomView","direction","disableBackButtonMenu","headerBackTitle","headerBackTitleStyle","headerBackTitleVisible","headerHideBackButton","headerHideShadow","headerLargeStyle","headerLargeTitle","headerLargeTitleHideShadow","headerLargeTitleStyle","headerShown","headerStyle","headerTintColor","headerTitleStyle","headerTopInsetEnabled","headerTranslucent","hideShadow","largeTitle","largeTitleHideShadow","title","translucent","scene","headerOptions","backTitle","backTitleFontFamily","fontFamily","backTitleFontSize","fontSize","color","topInsetEnabled","hideBackButton","largeTitleBackgroundColor","backgroundColor","largeTitleColor","largeTitleFontFamily","largeTitleFontSize","largeTitleFontWeight","fontWeight","titleColor","titleFontFamily","titleFontSize","titleFontWeight","hasHeader","header","hidden","undefined","blurEffect","children","backButtonImage","push","source","searchBar","headerLeft","headerBackImage","goBack","requestAnimationFrame","onPress","pressColorAndroid","headerPressColorAndroid","tintColor","backImage","label","backButtonTitle","truncatedLabel","truncatedBackButtonTitle","labelVisible","backTitleVisible","labelStyle","titleLayout","layoutPreset","truncatedTitle","titleStyle","headerTitle","headerRight","MaybeNestedStack","isHeaderInModal","screenProps","SceneComponent","Screen","useContext","style","styles","scenes","StyleSheet","absoluteFill","enabled","isNativeStack","component","StackView","descriptors","map","getComponent","routeNavigationProp","mode","transparentCard","stackPresentation","cardTransparent","stackAnimation","animationEnabled","console","warn","isHeaderInPush","cardStyle","customAnimationOnSwipe","replaceAnimation","pointerEvents","gestureEnabled","nativeBackButtonDismissalEnabled","fullScreenSwipeEnabled","screenOrientation","statusBarAnimation","statusBarColor","statusBarHidden","statusBarStyle","statusBarTranslucent","onWillAppear","_options$onWillAppear","onWillDisappear","_options$onWillDisapp","onDisappear","_options$onDisappear","onHeaderBackButtonClicked","onDismissed","e","nativeEvent","create","flex","createStackNavigator","routeConfigMap","stackConfig","router","superGetStateForAction","getStateForAction","action","backRouteIndex","backRoute","find","indexOf","newRoutes","splice","isTransitioning"],"sources":["createNativeStackNavigator.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Platform,\n  StyleSheet,\n  Animated,\n  StyleProp,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\nimport {\n  ScreenContext,\n  ScreenStack,\n  ScreenStackHeaderBackButtonImage,\n  ScreenStackHeaderCenterView,\n  ScreenStackHeaderConfig,\n  ScreenStackHeaderConfigProps,\n  ScreenStackHeaderLeftView,\n  ScreenStackHeaderRightView,\n  ScreenStackHeaderSearchBarView,\n  SearchBar,\n  StackPresentationTypes,\n} from 'react-native-screens';\nimport {\n  createNavigator,\n  SceneView,\n  StackActions,\n  StackRouter,\n  NavigationRouteConfigMap,\n  CreateNavigatorConfig,\n  NavigationStackRouterConfig,\n  NavigationParams,\n  NavigationRoute,\n  NavigationDescriptor,\n  NavigationState,\n  NavigationNavigator,\n  NavigationAction,\n  NavigationProp,\n  NavigationScreenProp,\n} from 'react-navigation';\nimport { NativeStackNavigationOptions as NativeStackNavigationOptionsV5 } from './native-stack/types';\nimport { HeaderBackButton } from 'react-navigation-stack';\nimport {\n  StackNavigationHelpers,\n  StackNavigationProp,\n  Layout,\n} from 'react-navigation-stack/src/vendor/types';\n\nconst REMOVE_ACTION = 'NativeStackNavigator/REMOVE';\n\nconst isAndroid = Platform.OS === 'android';\n\nlet didWarn = isAndroid;\n\nfunction renderComponentOrThunk(componentOrThunk: unknown, props: unknown) {\n  if (typeof componentOrThunk === 'function') {\n    return componentOrThunk(props);\n  }\n  return componentOrThunk;\n}\n\ntype NativeStackRemoveNavigationAction = {\n  type: typeof REMOVE_ACTION;\n  immediate: boolean;\n  dismissCount: number;\n  key?: string;\n};\n\nexport type NativeStackNavigationProp = StackNavigationProp;\n\nexport type NativeStackNavigationOptions = StackNavigatorOptions &\n  NativeStackNavigationOptionsV5 &\n  BackButtonProps & {\n    onWillAppear?: () => void;\n    onAppear?: () => void;\n    onWillDisappear?: () => void;\n    onDisappear?: () => void;\n    // these props differ from the ones used in v5 `native-stack`, and we would like to keep the API consistent between versions\n    /** Use `headerHideShadow` to be consistent with v5 `native-stack` */\n    hideShadow?: boolean;\n    /** Use `headerLargeTitle` to be consistent with v5 `native-stack` */\n    largeTitle?: boolean;\n    /** Use `headerLargeTitleHideShadow` to be consistent with v5 `native-stack` */\n    largeTitleHideShadow?: boolean;\n    /** Use `headerTranslucent` to be consistent with v5 `native-stack` */\n    translucent?: boolean;\n  };\n\n// these are adopted from `stack` navigator\ntype StackNavigatorOptions = {\n  /** This is an option from `stackNavigator` and it hides the header when set to `null`. Use `headerShown` instead to be consistent with v5 `native-stack`. */\n  header?: React.ComponentType<Record<string, unknown>> | null;\n  /** This is an option from `stackNavigator` and it controls the stack presentation along with `mode` prop. Use `stackPresentation` instead to be consistent with v5 `native-stack` */\n  cardTransparent?: boolean;\n  /** This is an option from `stackNavigator` and it sets stack animation to none when `false` passed. Use `stackAnimation: 'none'` instead to be consistent with v5 `native-stack` */\n  animationEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n};\n\n// these are the props used for rendering back button taken from `react-navigation-stack`\ntype BackButtonProps = {\n  headerBackImage?: (props: { tintColor: string }) => React.ReactNode;\n  headerPressColorAndroid?: string;\n  headerTintColor?: string;\n  backButtonTitle?: string;\n  truncatedBackButtonTitle?: string;\n  backTitleVisible?: boolean;\n  headerBackTitleStyle?: Animated.WithAnimatedValue<StyleProp<TextStyle>>;\n  layoutPreset?: Layout;\n};\n\ntype NativeStackDescriptor = NavigationDescriptor<\n  NavigationParams,\n  NativeStackNavigationOptions\n>;\n\ntype NativeStackDescriptorMap = {\n  [key: string]: NativeStackDescriptor;\n};\n\n// these are the props used for rendering back button taken from `react-navigation-stack`\ntype NativeStackNavigationConfig = {\n  /** This is an option from `stackNavigator` and controls the stack presentation along with `cardTransparent` prop. Use `stackPresentation` instead to be consistent with v5 `native-stack` */\n  mode?: 'modal' | 'containedModal';\n  /** This is an option from `stackNavigator` and makes the header hide when set to `none`. Use `headerShown` instead to be consistent with v5 `native-stack` */\n  headerMode?: 'none';\n  /** This is an option from `stackNavigator` and controls the stack presentation along with `mode` prop. Use `stackPresentation` instead to be consistent with v5 `native-stack` */\n  transparentCard?: boolean;\n};\n\nfunction removeScene(\n  route: NavigationRoute<NavigationParams>,\n  dismissCount: number,\n  navigation: StackNavigationHelpers\n) {\n  navigation.dispatch({\n    // @ts-ignore special navigation action for native stack\n    type: REMOVE_ACTION,\n    immediate: true,\n    key: route.key,\n    dismissCount,\n  });\n}\n\nfunction onAppear(\n  route: NavigationRoute<NavigationParams>,\n  descriptor: NativeStackDescriptor,\n  navigation: StackNavigationHelpers\n) {\n  descriptor.options?.onAppear?.();\n  navigation.dispatch(\n    StackActions.completeTransition({\n      toChildKey: route.key,\n      key: navigation.state.key,\n    })\n  );\n}\n\nfunction onFinishTransitioning(navigation: StackNavigationHelpers) {\n  const { routes } = navigation.state;\n  const lastRoute = routes?.length && routes[routes.length - 1];\n\n  if (lastRoute) {\n    navigation.dispatch(\n      StackActions.completeTransition({\n        toChildKey: lastRoute.key,\n        key: navigation.state.key,\n      })\n    );\n  }\n}\n\nfunction renderHeaderConfig(\n  index: number,\n  route: NavigationRoute<NavigationParams>,\n  descriptor: NativeStackDescriptor,\n  navigationConfig: NativeStackNavigationConfig\n) {\n  const { options } = descriptor;\n  const { headerMode } = navigationConfig;\n\n  const {\n    backButtonInCustomView,\n    direction,\n    disableBackButtonMenu,\n    headerBackTitle,\n    headerBackTitleStyle,\n    headerBackTitleVisible,\n    headerHideBackButton,\n    headerHideShadow,\n    headerLargeStyle,\n    headerLargeTitle,\n    headerLargeTitleHideShadow,\n    headerLargeTitleStyle,\n    headerShown,\n    headerStyle,\n    headerTintColor,\n    headerTitleStyle,\n    headerTopInsetEnabled = true,\n    headerTranslucent,\n    hideShadow,\n    largeTitle,\n    largeTitleHideShadow,\n    title,\n    translucent,\n  } = options;\n\n  const scene = {\n    index,\n    key: route.key,\n    route,\n    descriptor,\n  };\n\n  const headerOptions: ScreenStackHeaderConfigProps = {\n    backButtonInCustomView,\n    backTitle: headerBackTitleVisible === false ? '' : headerBackTitle,\n    backTitleFontFamily: headerBackTitleStyle?.fontFamily,\n    backTitleFontSize: headerBackTitleStyle?.fontSize,\n    color: headerTintColor,\n    direction,\n    disableBackButtonMenu,\n    topInsetEnabled: headerTopInsetEnabled,\n    hideBackButton: headerHideBackButton,\n    hideShadow: headerHideShadow || hideShadow,\n    largeTitle: headerLargeTitle || largeTitle,\n    largeTitleBackgroundColor:\n      headerLargeStyle?.backgroundColor ||\n      // @ts-ignore old implementation, will not be present in TS API, but can be used here\n      headerLargeTitleStyle?.backgroundColor,\n    largeTitleColor: headerLargeTitleStyle?.color,\n    largeTitleFontFamily: headerLargeTitleStyle?.fontFamily,\n    largeTitleFontSize: headerLargeTitleStyle?.fontSize,\n    largeTitleFontWeight: headerLargeTitleStyle?.fontWeight,\n    largeTitleHideShadow: largeTitleHideShadow || headerLargeTitleHideShadow,\n    title,\n    titleColor: headerTitleStyle?.color || headerTintColor,\n    titleFontFamily: headerTitleStyle?.fontFamily,\n    titleFontSize: headerTitleStyle?.fontSize,\n    titleFontWeight: headerTitleStyle?.fontWeight,\n    translucent: headerTranslucent || translucent || false,\n  };\n\n  const hasHeader =\n    headerShown !== false && headerMode !== 'none' && options.header !== null;\n  if (!hasHeader) {\n    return <ScreenStackHeaderConfig {...headerOptions} hidden />;\n  }\n\n  if (headerStyle !== undefined) {\n    headerOptions.backgroundColor = headerStyle.backgroundColor;\n    headerOptions.blurEffect = headerStyle.blurEffect;\n  }\n\n  const children = [];\n\n  if (options.backButtonImage) {\n    children.push(\n      <ScreenStackHeaderBackButtonImage\n        key=\"backImage\"\n        source={options.backButtonImage}\n      />\n    );\n  }\n\n  if (Platform.OS === 'ios' && options.searchBar) {\n    children.push(\n      <ScreenStackHeaderSearchBarView>\n        <SearchBar {...options.searchBar} />\n      </ScreenStackHeaderSearchBarView>\n    );\n  }\n\n  if (options.headerLeft !== undefined) {\n    children.push(\n      <ScreenStackHeaderLeftView key=\"left\">\n        {renderComponentOrThunk(options.headerLeft, { scene })}\n      </ScreenStackHeaderLeftView>\n    );\n  } else if (options.headerBackImage !== undefined) {\n    const goBack = () => {\n      // Go back on next tick because button ripple effect needs to happen on Android\n      requestAnimationFrame(() => {\n        descriptor.navigation.goBack(descriptor.key);\n      });\n    };\n\n    children.push(\n      <ScreenStackHeaderLeftView key=\"left\">\n        <HeaderBackButton\n          onPress={goBack}\n          pressColorAndroid={options.headerPressColorAndroid}\n          tintColor={options.headerTintColor}\n          backImage={options.headerBackImage}\n          label={options.backButtonTitle}\n          truncatedLabel={options.truncatedBackButtonTitle}\n          labelVisible={options.backTitleVisible}\n          labelStyle={options.headerBackTitleStyle}\n          titleLayout={options.layoutPreset}\n          // @ts-ignore old props kept for very old version of `react-navigation-stack`\n          title={options.backButtonTitle}\n          truncatedTitle={options.truncatedBackButtonTitle}\n          backTitleVisible={options.backTitleVisible}\n          titleStyle={options.headerBackTitleStyle}\n          layoutPreset={options.layoutPreset}\n          scene={scene}\n        />\n      </ScreenStackHeaderLeftView>\n    );\n  }\n\n  if (options.headerTitle) {\n    if (title === undefined && typeof options.headerTitle === 'string') {\n      headerOptions.title = options.headerTitle;\n    } else {\n      children.push(\n        <ScreenStackHeaderCenterView key=\"center\">\n          {renderComponentOrThunk(options.headerTitle, { scene })}\n        </ScreenStackHeaderCenterView>\n      );\n    }\n  }\n\n  if (options.headerRight) {\n    children.push(\n      <ScreenStackHeaderRightView key=\"right\">\n        {renderComponentOrThunk(options.headerRight, { scene })}\n      </ScreenStackHeaderRightView>\n    );\n  }\n\n  if (children.length > 0) {\n    headerOptions.children = children;\n  }\n\n  return <ScreenStackHeaderConfig {...headerOptions} />;\n}\n\nconst MaybeNestedStack = ({\n  isHeaderInModal,\n  screenProps,\n  route,\n  navigation,\n  SceneComponent,\n  index,\n  descriptor,\n  navigationConfig,\n}: {\n  isHeaderInModal: boolean;\n  screenProps: unknown;\n  route: NavigationRoute<NavigationParams>;\n  navigation: NavigationScreenProp<\n    NavigationRoute<NavigationParams>,\n    NavigationParams\n  >;\n  SceneComponent: React.ComponentType<Record<string, unknown>>;\n  index: number;\n  descriptor: NativeStackDescriptor;\n  navigationConfig: NativeStackNavigationConfig;\n}) => {\n  const Screen = React.useContext(ScreenContext);\n\n  if (isHeaderInModal) {\n    return (\n      <ScreenStack style={styles.scenes}>\n        <Screen style={StyleSheet.absoluteFill} enabled isNativeStack>\n          {renderHeaderConfig(index, route, descriptor, navigationConfig)}\n          <SceneView\n            screenProps={screenProps}\n            navigation={navigation}\n            component={SceneComponent}\n          />\n        </Screen>\n      </ScreenStack>\n    );\n  }\n  return (\n    <SceneView\n      screenProps={screenProps}\n      navigation={navigation}\n      component={SceneComponent}\n    />\n  );\n};\n\ntype StackViewProps = {\n  navigation: StackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n  navigationConfig: NativeStackNavigationConfig;\n  screenProps: unknown;\n};\n\nfunction StackView({\n  navigation,\n  descriptors,\n  navigationConfig,\n  screenProps,\n}: StackViewProps) {\n  const { routes } = navigation.state;\n  const Screen = React.useContext(ScreenContext);\n  return (\n    <ScreenStack\n      style={styles.scenes}\n      onFinishTransitioning={() => onFinishTransitioning(navigation)}>\n      {routes.map((route, index) => {\n        const descriptor = descriptors[route.key];\n        const { getComponent, options } = descriptor;\n        const routeNavigationProp = descriptor.navigation;\n        const { mode, transparentCard } = navigationConfig;\n        const SceneComponent = getComponent();\n\n        let stackPresentation: StackPresentationTypes = 'push';\n\n        if (options.stackPresentation) {\n          stackPresentation = options.stackPresentation;\n        } else {\n          // this shouldn't be used because we have a prop for that\n          if (mode === 'modal' || mode === 'containedModal') {\n            stackPresentation = mode;\n            if (transparentCard || options.cardTransparent) {\n              stackPresentation =\n                mode === 'containedModal'\n                  ? 'containedTransparentModal'\n                  : 'transparentModal';\n            }\n          }\n        }\n        let stackAnimation = options.stackAnimation;\n        if (options.animationEnabled === false) {\n          stackAnimation = 'none';\n        }\n\n        const hasHeader =\n          options.headerShown !== false &&\n          navigationConfig?.headerMode !== 'none' &&\n          options.header !== null;\n\n        if (\n          !didWarn &&\n          stackPresentation !== 'push' &&\n          options.headerShown !== undefined\n        ) {\n          didWarn = true;\n          console.warn(\n            'Be aware that changing the visibility of header in modal on iOS will result in resetting the state of the screen.'\n          );\n        }\n\n        const isHeaderInModal = isAndroid\n          ? false\n          : stackPresentation !== 'push' &&\n            hasHeader &&\n            options.headerShown === true;\n        const isHeaderInPush = isAndroid\n          ? hasHeader\n          : stackPresentation === 'push' && hasHeader;\n\n        return (\n          <Screen\n            key={`screen_${route.key}`}\n            enabled\n            isNativeStack\n            style={[StyleSheet.absoluteFill, options.cardStyle]}\n            stackAnimation={stackAnimation}\n            customAnimationOnSwipe={options.customAnimationOnSwipe}\n            stackPresentation={stackPresentation}\n            replaceAnimation={\n              options.replaceAnimation === undefined\n                ? 'pop'\n                : options.replaceAnimation\n            }\n            pointerEvents={\n              index === navigation.state.routes.length - 1 ? 'auto' : 'none'\n            }\n            gestureEnabled={\n              Platform.OS === 'android'\n                ? false\n                : options.gestureEnabled === undefined\n                ? true\n                : options.gestureEnabled\n            }\n            nativeBackButtonDismissalEnabled={\n              options.nativeBackButtonDismissalEnabled\n            }\n            fullScreenSwipeEnabled={options.fullScreenSwipeEnabled}\n            screenOrientation={options.screenOrientation}\n            statusBarAnimation={options.statusBarAnimation}\n            statusBarColor={options.statusBarColor}\n            statusBarHidden={options.statusBarHidden}\n            statusBarStyle={options.statusBarStyle}\n            statusBarTranslucent={options.statusBarTranslucent}\n            onAppear={() => onAppear(route, descriptor, routeNavigationProp)}\n            onWillAppear={() => options?.onWillAppear?.()}\n            onWillDisappear={() => options?.onWillDisappear?.()}\n            onDisappear={() => options?.onDisappear?.()}\n            onHeaderBackButtonClicked={() =>\n              removeScene(route, 1, routeNavigationProp)\n            }\n            onDismissed={(e) =>\n              removeScene(\n                route,\n                e.nativeEvent.dismissCount,\n                routeNavigationProp\n              )\n            }>\n            {isHeaderInPush &&\n              renderHeaderConfig(index, route, descriptor, navigationConfig)}\n            <MaybeNestedStack\n              isHeaderInModal={isHeaderInModal}\n              screenProps={screenProps}\n              route={route}\n              navigation={routeNavigationProp}\n              SceneComponent={SceneComponent}\n              index={index}\n              descriptor={descriptor}\n              navigationConfig={navigationConfig}\n            />\n          </Screen>\n        );\n      })}\n    </ScreenStack>\n  );\n}\n\nconst styles = StyleSheet.create({\n  scenes: { flex: 1 },\n});\n\nfunction createStackNavigator(\n  routeConfigMap: NavigationRouteConfigMap<\n    NativeStackNavigationOptions,\n    StackNavigationProp\n  >,\n  stackConfig: CreateNavigatorConfig<\n    NativeStackNavigationConfig,\n    NavigationStackRouterConfig,\n    NativeStackNavigationOptions,\n    StackNavigationProp\n  > = {}\n): NavigationNavigator<\n  Record<string, unknown>,\n  NavigationProp<NavigationState>\n> {\n  const router = StackRouter(routeConfigMap, stackConfig);\n\n  // below we override getStateForAction method in order to add handling for\n  // a custom native stack navigation action. The action REMOVE that we want to\n  // add works in a similar way to POP, but it does not remove all the routes\n  // that sit on top of the removed route. For example if we have three routes\n  // [a,b,c] and call POP on b, then both b and c will go away. In case we\n  // call REMOVE on b, only b will be removed from the stack and the resulting\n  // state will be [a, c]\n  const superGetStateForAction = router.getStateForAction;\n  router.getStateForAction = (\n    action: NavigationAction | NativeStackRemoveNavigationAction,\n    state\n  ) => {\n    if (action.type === REMOVE_ACTION) {\n      const { key, immediate, dismissCount } = action;\n      let backRouteIndex = state.index;\n      if (key) {\n        const backRoute = state.routes.find(\n          (route: NavigationRoute<NavigationParams>) => route.key === key\n        );\n        backRouteIndex = state.routes.indexOf(backRoute);\n      }\n\n      if (backRouteIndex > 0) {\n        const newRoutes = [...state.routes];\n        if (dismissCount > 1) {\n          // when dismissing with iOS 14 native header back button, we can pop more than 1 screen at a time\n          // and the `backRouteIndex` is the index of the previous screen. Since we are starting already\n          // on the previous screen, we add 1 to start.\n          newRoutes.splice(backRouteIndex - dismissCount + 1, dismissCount);\n        } else {\n          newRoutes.splice(backRouteIndex, 1);\n        }\n\n        return {\n          ...state,\n          routes: newRoutes,\n          index: newRoutes.length - 1,\n          isTransitioning: immediate !== true,\n        };\n      }\n    }\n    return superGetStateForAction(action as NavigationAction, state);\n  };\n  // Create a navigator with StackView as the view\n  return createNavigator(StackView, router, stackConfig);\n}\n\nexport default createStackNavigator;\n"]},"metadata":{},"sourceType":"module"}